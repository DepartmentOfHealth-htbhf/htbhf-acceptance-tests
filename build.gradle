buildscript {

    ext {
        junitVersion = '5.3.2'
        springVersion = '5.1.8.RELEASE'
        seleniumVersion = '3.141.59'
        chromeWebriverPath = '../chromedriver/chromedriver'
        cucumberVersion = '4.7.1'
    }

    repositories {
        jcenter()
        mavenCentral()
    }
}

plugins {
    id 'io.franzbecker.gradle-lombok' version '1.14'
}
apply plugin: 'java'
sourceCompatibility = 1.11
targetCompatibility = 1.11

lombok {
    version = '1.18.4'
    sha256 = ""
}

repositories {
    jcenter()
}


configurations.all {
    resolutionStrategy {
        cacheDynamicVersionsFor 0, 'seconds'
    }
}

dependencies {
    implementation "com.google.guava:guava:27.0.1-jre"
    implementation "org.springframework:spring-context:${springVersion}"
    implementation "org.springframework:spring-beans:${springVersion}"

    testImplementation "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
    testImplementation "org.junit.vintage:junit-vintage-engine:${junitVersion}"

    testImplementation "org.seleniumhq.selenium:selenium-java:${seleniumVersion}"
    testImplementation "org.springframework:spring-test:${springVersion}"
    testImplementation "io.cucumber:cucumber-junit:${cucumberVersion}"
    testImplementation "io.cucumber:cucumber-java:${cucumberVersion}"
    testImplementation "io.cucumber:cucumber-spring:${cucumberVersion}"
    testImplementation "org.assertj:assertj-core:3.13.2"
    testImplementation "com.github.tomakehurst:wiremock-jre8:2.24.1"
    testImplementation "org.apache.commons:commons-lang3:3.9"
}

// Run with -Pcompatibility to just run compatibility tests and none of the other unit tests or acceptance tests.
test {
    if (project.hasProperty("compatibility")) {
        setBrowserStackSystemProperties("windows", "win10Chrome")
        filter {
            systemProperty "spring.profiles.active", "browserstack"
            includeTestsMatching "uk.gov.dhsc.htbhf.RunCompatibilityTests"
        }
    } else {
        systemProperty "webdriver.chrome.driver", "../chromedriver/chromedriver"
        filter {
            excludeTestsMatching "uk.gov.dhsc.htbhf.RunCompatibilityTests"
        }
    }
    useJUnitPlatform()
    reports {
        junitXml.enabled = false
        html.enabled = true
    }
}

private def setBrowserStackSystemProperties(requiredOsKey, requiredDeviceName) {
    loadProperties()
    println "Looking for BrowserStack config: [$requiredOsKey - $requiredDeviceName]"
    config.eachWithIndex { def osTests, int i ->
        if(osTests.key == requiredOsKey) {
            def testsForOs = osTests.value
            testsForOs.eachWithIndex { def deviceTests, int j ->
                def deviceName = deviceTests.key
                if(deviceName == requiredDeviceName) {
                    storePropertiesForOsAndDevice(deviceTests)
                }
            }

        }
    }
}

private def storePropertiesForOsAndDevice(deviceTests) {
    def deviceCapabilities = deviceTests.value
    deviceCapabilities.eachWithIndex { def capabilities, int k ->
        def capabilitiesName = capabilities.key
        def capabilitiesValue = capabilities.value
        println "Capability: $capabilitiesName - $capabilitiesValue"
        test.systemProperty "BROWSERSTACK.TEST.$capabilitiesName", "$capabilitiesValue"
    }
}

private def loadProperties() {
    def configFile = file('browserstack.config')
    def config = new ConfigSlurper().parse(configFile.toURI().toURL())
    project.ext.config = config
}
